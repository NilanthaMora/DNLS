// <auto-generated />
using System;
using IdentityExtension.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IdentityExtension.Migrations
{
    [DbContext(typeof(DnlDBContext))]
    [Migration("20220613062101_dnls2")]
    partial class dnls2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityExtension.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MobileContact");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.Property<string>("UserRole");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("IdentityExtension.Models.EquipmentProcurement", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("fileRef");

                    b.Property<string>("item");

                    b.Property<string>("proDistribution");

                    b.Property<int>("procuId");

                    b.HasKey("id");

                    b.HasIndex("procuId")
                        .IsUnique();

                    b.ToTable("equipmentProcurements");
                });

            modelBuilder.Entity("IdentityExtension.Models.EquipmentTable", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("equipment")
                        .IsRequired();

                    b.Property<int>("equipmentCode");

                    b.Property<string>("equipmentGeneralInq");

                    b.Property<string>("equipmentSellCode");

                    b.Property<string>("imageUrl");

                    b.HasKey("id");

                    b.ToTable("equipment_Tables");
                });

            modelBuilder.Entity("IdentityExtension.Models.Procurement", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationId");

                    b.Property<DateTime>("cDate");

                    b.Property<string>("equipCode");

                    b.Property<string>("lastPurchasePrice");

                    b.Property<string>("make");

                    b.Property<string>("model");

                    b.Property<string>("qtyApproved");

                    b.Property<string>("qtyOrdered");

                    b.Property<string>("remarks");

                    b.Property<string>("rlRef");

                    b.Property<string>("userId");

                    b.HasKey("id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("procurements");
                });

            modelBuilder.Entity("IdentityExtension.Models.Product", b =>
                {
                    b.Property<int>("productId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name");

                    b.Property<string>("type");

                    b.HasKey("productId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("IdentityExtension.Models.SpareProcurement", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("currentStock");

                    b.Property<string>("firstRate");

                    b.Property<string>("forthRate");

                    b.Property<string>("partNo");

                    b.Property<int>("procuId");

                    b.Property<string>("sbRef");

                    b.Property<string>("secondRate");

                    b.Property<string>("thirdRate");

                    b.HasKey("id");

                    b.HasIndex("procuId")
                        .IsUnique();

                    b.ToTable("spareProcurements");
                });

            modelBuilder.Entity("IdentityExtension.Models.EquipmentProcurement", b =>
                {
                    b.HasOne("IdentityExtension.Models.Procurement", "Procurement")
                        .WithOne("EquipmentProcurement")
                        .HasForeignKey("IdentityExtension.Models.EquipmentProcurement", "procuId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.Procurement", b =>
                {
                    b.HasOne("IdentityExtension.Models.ApplicationUser", "Application")
                        .WithMany("Procurements")
                        .HasForeignKey("ApplicationId");
                });

            modelBuilder.Entity("IdentityExtension.Models.SpareProcurement", b =>
                {
                    b.HasOne("IdentityExtension.Models.Procurement", "Procurement")
                        .WithOne("SpareProcurement")
                        .HasForeignKey("IdentityExtension.Models.SpareProcurement", "procuId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
