// <auto-generated />
using System;
using IdentityExtension.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IdentityExtension.Migrations.DnlDB
{
    [DbContext(typeof(DnlDBContext))]
    partial class DnlDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityExtension.Models.Ais", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("antennaHeight");

                    b.Property<DateTime?>("dateInstalled");

                    b.Property<DateTime?>("dateModified");

                    b.Property<int>("eqId");

                    b.Property<string>("freqBand");

                    b.Property<string>("location");

                    b.Property<string>("maxDetectRange");

                    b.Property<DateTime?>("pfileDate");

                    b.Property<string>("pfileNum");

                    b.Property<string>("powerOp");

                    b.Property<string>("price");

                    b.Property<string>("security");

                    b.Property<string>("type");

                    b.Property<DateTime?>("weDate");

                    b.HasKey("id");

                    b.HasIndex("eqId")
                        .IsUnique();

                    b.ToTable("ais");
                });

            modelBuilder.Entity("IdentityExtension.Models.Ammunition", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description");

                    b.HasKey("id");

                    b.ToTable("ammunitions");
                });

            modelBuilder.Entity("IdentityExtension.Models.Anemometers", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dateInstalled");

                    b.Property<DateTime?>("dateModified");

                    b.Property<int>("eqId");

                    b.Property<string>("location");

                    b.Property<string>("outputPower");

                    b.Property<DateTime?>("pfileDate");

                    b.Property<string>("pfileNum");

                    b.Property<string>("price");

                    b.Property<DateTime?>("weDate");

                    b.HasKey("id");

                    b.HasIndex("eqId")
                        .IsUnique();

                    b.ToTable("anemometers");
                });

            modelBuilder.Entity("IdentityExtension.Models.Area", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("code");

                    b.Property<string>("description");

                    b.HasKey("id");

                    b.ToTable("areas");
                });

            modelBuilder.Entity("IdentityExtension.Models.Base", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("areaId");

                    b.Property<int>("baseType");

                    b.Property<int>("code");

                    b.Property<string>("description");

                    b.Property<string>("payBase");

                    b.Property<string>("remCd");

                    b.Property<int>("shipTypeId");

                    b.HasKey("id");

                    b.HasIndex("areaId");

                    b.HasIndex("shipTypeId");

                    b.ToTable("bases");
                });

            modelBuilder.Entity("IdentityExtension.Models.Bill.ElectricityAccountBill", b =>
                {
                    b.Property<int>("billAccId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("accountNumber");

                    b.Property<bool>("active");

                    b.Property<int>("areaId");

                    b.Property<int>("baseId");

                    b.Property<int>("billType");

                    b.Property<string>("capacity");

                    b.Property<DateTime>("createdDate");

                    b.Property<int>("subUnitId");

                    b.Property<string>("userId");

                    b.HasKey("billAccId");

                    b.HasIndex("areaId");

                    b.HasIndex("billType");

                    b.ToTable("ElectricityAccountBills");
                });

            modelBuilder.Entity("IdentityExtension.Models.Bill.ElectricityBillDetail", b =>
                {
                    b.Property<int>("eleAccId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("adfDate");

                    b.Property<string>("adfRefer");

                    b.Property<DateTime>("billConDate");

                    b.Property<string>("billConUserId");

                    b.Property<bool>("billConfirm");

                    b.Property<int>("billType");

                    b.Property<decimal>("chargePerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("createdDate");

                    b.Property<decimal>("currentMonth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("departmentCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("editDate");

                    b.Property<string>("editUserId");

                    b.Property<decimal>("fixedCharges")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("lastMonth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("month");

                    b.Property<decimal>("monthlyCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("unit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("userId");

                    b.Property<int>("year");

                    b.HasKey("eleAccId");

                    b.HasIndex("billType");

                    b.ToTable("ElectricityBillDetails");
                });

            modelBuilder.Entity("IdentityExtension.Models.Bill.ElectricityBillDetailBulk", b =>
                {
                    b.Property<int>("eleAccId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("adfDate");

                    b.Property<string>("adfRefer");

                    b.Property<DateTime>("billConDate");

                    b.Property<string>("billConUserId");

                    b.Property<bool>("billConfirm");

                    b.Property<int>("billType");

                    b.Property<DateTime>("createdDate");

                    b.Property<decimal>("dayChargePerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("dayCurrentMonth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("dayLastMonth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("dayUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("departmentCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("editDate");

                    b.Property<string>("editUserId");

                    b.Property<decimal>("fixedCharges")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("kvaChargePerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("kvaUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("month");

                    b.Property<decimal>("monthlyCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("offChargePerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("offCurrentMonth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("offLastMonth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("offUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("peakChargePerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("peakCurrentMonth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("peakLastMonth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("peakUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("userId");

                    b.Property<int>("year");

                    b.HasKey("eleAccId");

                    b.ToTable("ElectricityBillDetailBulks");
                });

            modelBuilder.Entity("IdentityExtension.Models.Bill.ElectricityBillDetailDomestic", b =>
                {
                    b.Property<int>("eleAccId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("adfDate");

                    b.Property<string>("adfRefer");

                    b.Property<DateTime>("billConDate");

                    b.Property<string>("billConUserId");

                    b.Property<bool>("billConfirm");

                    b.Property<int>("billType");

                    b.Property<DateTime>("createdDate");

                    b.Property<DateTime>("editDate");

                    b.Property<string>("editUserId");

                    b.Property<decimal>("fixCharge_0_30")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("fixCharge_0_60")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("fixCharge_121_180")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("fixCharge_180")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("fixCharge_31_60")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("fixCharge_61_90")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("fixCharge_91_120")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("month");

                    b.Property<decimal>("monthlyCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("totalUnits")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("unitPrice_0_30")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("unitPrice_0_60")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("unitPrice_121_180")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("unitPrice_180")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("unitPrice_31_60")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("unitPrice_61_90")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("unitPrice_91_120")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("unit_0_30")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("unit_0_60")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("unit_121_180")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("unit_180")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("unit_31_60")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("unit_61_90")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("unit_91_120")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("userId");

                    b.Property<int>("year");

                    b.HasKey("eleAccId");

                    b.ToTable("ElectricityBillDetailDomestics");
                });

            modelBuilder.Entity("IdentityExtension.Models.Bill.ElectricityBillType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("billType");

                    b.Property<string>("description");

                    b.HasKey("id");

                    b.ToTable("ElectricityBillTypes");
                });

            modelBuilder.Entity("IdentityExtension.Models.CanonType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description");

                    b.HasKey("id");

                    b.ToTable("canonTypes");
                });

            modelBuilder.Entity("IdentityExtension.Models.CCTV", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("channels");

                    b.Property<DateTime?>("dateInstalled");

                    b.Property<DateTime?>("dateModified");

                    b.Property<int>("eqId");

                    b.Property<string>("location");

                    b.Property<string>("noOfCameras");

                    b.Property<string>("noOfDisplays");

                    b.Property<string>("noOfHdd");

                    b.Property<string>("systemId");

                    b.Property<string>("systemType");

                    b.Property<string>("typeOfCameras");

                    b.Property<string>("typeOfDisplays");

                    b.Property<string>("typeOfHdd");

                    b.Property<string>("typeOfPeriod");

                    b.HasKey("id");

                    b.HasIndex("eqId")
                        .IsUnique();

                    b.ToTable("cCTVs");
                });

            modelBuilder.Entity("IdentityExtension.Models.Communication", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dateInstalled");

                    b.Property<DateTime?>("dateModified");

                    b.Property<int>("eqId");

                    b.Property<string>("freqBand");

                    b.Property<string>("location");

                    b.Property<DateTime?>("pfileDate");

                    b.Property<string>("pfileNum");

                    b.Property<string>("powerOp");

                    b.Property<string>("price");

                    b.Property<string>("security");

                    b.Property<string>("type");

                    b.Property<DateTime?>("weDate");

                    b.HasKey("id");

                    b.HasIndex("eqId")
                        .IsUnique();

                    b.ToTable("communications");
                });

            modelBuilder.Entity("IdentityExtension.Models.Country", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description");

                    b.HasKey("id");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("IdentityExtension.Models.DVR", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dateInstalled");

                    b.Property<DateTime?>("dateModified");

                    b.Property<string>("dvrSubmitMake");

                    b.Property<string>("dvrSubmitModel");

                    b.Property<string>("dvrSubmitSrno");

                    b.Property<string>("dvrSubmitState");

                    b.Property<string>("dvrSubmitType");

                    b.Property<int>("eqId");

                    b.Property<string>("location");

                    b.HasKey("id");

                    b.HasIndex("eqId")
                        .IsUnique();

                    b.ToTable("dVRs");
                });

            modelBuilder.Entity("IdentityExtension.Models.ECDI", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dateInstalled");

                    b.Property<int>("eqId");

                    b.Property<string>("location");

                    b.Property<DateTime?>("pfileDate");

                    b.Property<string>("pfileNum");

                    b.Property<string>("price");

                    b.Property<DateTime?>("weDate");

                    b.HasKey("id");

                    b.HasIndex("eqId")
                        .IsUnique();

                    b.ToTable("eCDIs");
                });

            modelBuilder.Entity("IdentityExtension.Models.Engine", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dateInstalled");

                    b.Property<DateTime?>("dateModified");

                    b.Property<int>("equipId");

                    b.Property<string>("powerRating");

                    b.Property<DateTime?>("proFileDate");

                    b.Property<DateTime?>("warrantyDate");

                    b.HasKey("id");

                    b.HasIndex("equipId")
                        .IsUnique();

                    b.ToTable("engines");
                });

            modelBuilder.Entity("IdentityExtension.Models.EODs", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("country");

                    b.Property<DateTime?>("dateInstalled");

                    b.Property<DateTime?>("dateModified");

                    b.Property<int>("eqId");

                    b.Property<DateTime?>("pfileDate");

                    b.Property<string>("pfileNum");

                    b.Property<string>("price");

                    b.Property<string>("pulseCount");

                    b.HasKey("id");

                    b.HasIndex("eqId")
                        .IsUnique();

                    b.ToTable("eODs");
                });

            modelBuilder.Entity("IdentityExtension.Models.Epirb", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("batteryExpDate");

                    b.Property<DateTime?>("dateInstalled");

                    b.Property<DateTime?>("dateModified");

                    b.Property<int>("eqId");

                    b.Property<DateTime?>("hruRepDate");

                    b.Property<string>("location");

                    b.Property<string>("mmsiReg");

                    b.Property<DateTime?>("pfileDate");

                    b.Property<string>("pfileNum");

                    b.Property<string>("price");

                    b.Property<DateTime?>("weDate");

                    b.HasKey("id");

                    b.HasIndex("eqId")
                        .IsUnique();

                    b.ToTable("epirbs");
                });

            modelBuilder.Entity("IdentityExtension.Models.Equipment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("action");

                    b.Property<DateTime?>("cDate");

                    b.Property<string>("del");

                    b.Property<DateTime?>("delDate");

                    b.Property<int>("eqBase");

                    b.Property<int>("eqTId");

                    b.Property<DateTime?>("g47Date");

                    b.Property<string>("g47Remarks");

                    b.Property<string>("make");

                    b.Property<string>("model");

                    b.Property<string>("remarks");

                    b.Property<string>("srNo")
                        .IsRequired();

                    b.Property<string>("state");

                    b.Property<string>("userId");

                    b.HasKey("id");

                    b.HasIndex("eqBase");

                    b.HasIndex("eqTId");

                    b.ToTable("equipments");
                });

            modelBuilder.Entity("IdentityExtension.Models.EquipmentProcurement", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("fileRef");

                    b.Property<string>("item");

                    b.Property<string>("proDistribution");

                    b.Property<int>("procuId");

                    b.HasKey("id");

                    b.HasIndex("procuId")
                        .IsUnique();

                    b.ToTable("equipmentProcurements");
                });

            modelBuilder.Entity("IdentityExtension.Models.EquipmentTable", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("equipment")
                        .IsRequired();

                    b.Property<int>("equipmentCode");

                    b.Property<string>("equipmentGeneralInq");

                    b.Property<string>("equipmentSellCode");

                    b.Property<string>("imageUrl");

                    b.Property<string>("varName")
                        .IsRequired();

                    b.HasKey("id");

                    b.ToTable("equipment_Tables");
                });

            modelBuilder.Entity("IdentityExtension.Models.EquipProcuView", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("cDate");

                    b.Property<int>("equipCode");

                    b.Property<string>("fileRef");

                    b.Property<string>("item");

                    b.Property<string>("lastPurchasePrice");

                    b.Property<string>("make");

                    b.Property<string>("model");

                    b.Property<string>("proDistribution");

                    b.Property<string>("qtyApproved");

                    b.Property<string>("qtyOrdered");

                    b.Property<string>("remarks");

                    b.Property<string>("rlRef");

                    b.Property<string>("userId");

                    b.HasKey("id");

                    b.ToTable("EquipProcuView");
                });

            modelBuilder.Entity("IdentityExtension.Models.FuelBillAccount", b =>
                {
                    b.Property<int>("billAccId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("accountNumber");

                    b.Property<bool>("active");

                    b.Property<int>("areaId");

                    b.Property<int>("baseId");

                    b.Property<int>("billType");

                    b.Property<DateTime>("createdDate");

                    b.Property<int>("subUnitId");

                    b.Property<string>("userId");

                    b.HasKey("billAccId");

                    b.HasIndex("areaId");

                    b.HasIndex("billType");

                    b.ToTable("FuelBillAccounts");
                });

            modelBuilder.Entity("IdentityExtension.Models.FuelBillDetail", b =>
                {
                    b.Property<int>("fuelAccId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("billConDate");

                    b.Property<string>("billConUserId");

                    b.Property<bool>("billConfirm");

                    b.Property<int>("billType");

                    b.Property<decimal>("chargePerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("createdDate");

                    b.Property<decimal>("departmentCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("editDate");

                    b.Property<string>("editUserId");

                    b.Property<decimal>("fixedCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("lastMonth");

                    b.Property<string>("month");

                    b.Property<decimal>("monthlyCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("totalCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("userId");

                    b.Property<int>("year");

                    b.HasKey("fuelAccId");

                    b.HasIndex("billType");

                    b.ToTable("FuelBillDetails");
                });

            modelBuilder.Entity("IdentityExtension.Models.FuelBillSubDetail", b =>
                {
                    b.Property<int>("fuelAccId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("billType");

                    b.Property<decimal>("chargePerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("createdDate");

                    b.Property<DateTime>("editDate");

                    b.Property<string>("editUserId");

                    b.Property<DateTime>("fromDate");

                    b.Property<int>("lastMonth");

                    b.Property<string>("month");

                    b.Property<decimal>("sno")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("toDate");

                    b.Property<decimal>("totalCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("userId");

                    b.Property<int>("year");

                    b.HasKey("fuelAccId");

                    b.HasIndex("billType");

                    b.ToTable("FuelBillSubDetails");
                });

            modelBuilder.Entity("IdentityExtension.Models.FuelBillType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("billType");

                    b.Property<string>("description");

                    b.HasKey("id");

                    b.ToTable("FuelBillTypes");
                });

            modelBuilder.Entity("IdentityExtension.Models.Generator", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("alternatorMake");

                    b.Property<string>("alternatorModel");

                    b.Property<string>("alternatorSrno");

                    b.Property<DateTime?>("dateModified");

                    b.Property<int>("eqId");

                    b.Property<string>("frequancy");

                    b.Property<string>("fullLoad");

                    b.Property<string>("kva");

                    b.Property<string>("ledgerPageNo");

                    b.Property<string>("maxLoad");

                    b.Property<string>("mode");

                    b.Property<string>("mountedAt");

                    b.Property<string>("mrh");

                    b.Property<string>("phase");

                    b.Property<string>("presentage");

                    b.Property<string>("primemoverMake");

                    b.Property<string>("primemoverModel");

                    b.Property<string>("primemoverSrno");

                    b.Property<string>("totalRunHours");

                    b.Property<string>("voltage");

                    b.HasKey("id");

                    b.HasIndex("eqId")
                        .IsUnique();

                    b.ToTable("generators");
                });

            modelBuilder.Entity("IdentityExtension.Models.Gps", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dateInstalled");

                    b.Property<DateTime?>("dateModified");

                    b.Property<int>("eqId");

                    b.Property<string>("location");

                    b.Property<DateTime?>("pfileDate");

                    b.Property<string>("pfileNum");

                    b.Property<string>("price");

                    b.Property<DateTime?>("weDate");

                    b.HasKey("id");

                    b.HasIndex("eqId")
                        .IsUnique();

                    b.ToTable("gps");
                });

            modelBuilder.Entity("IdentityExtension.Models.Guncom", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dateInstalled");

                    b.Property<DateTime?>("dateModified");

                    b.Property<int>("eqId");

                    b.Property<string>("location");

                    b.Property<DateTime?>("pfileDate");

                    b.Property<string>("pfileNum");

                    b.Property<string>("price");

                    b.Property<DateTime?>("weDate");

                    b.HasKey("id");

                    b.HasIndex("eqId")
                        .IsUnique();

                    b.ToTable("guncoms");
                });

            modelBuilder.Entity("IdentityExtension.Models.Gyro", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dateInstalled");

                    b.Property<DateTime?>("dateModified");

                    b.Property<int>("eqId");

                    b.Property<string>("interfaceUsed");

                    b.Property<string>("location");

                    b.Property<DateTime?>("pfileDate");

                    b.Property<string>("pfileNum");

                    b.Property<string>("price");

                    b.Property<DateTime?>("weDate");

                    b.HasKey("id");

                    b.HasIndex("eqId")
                        .IsUnique();

                    b.ToTable("gyros");
                });

            modelBuilder.Entity("IdentityExtension.Models.IntegratedHeadingSensor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dateInstalled");

                    b.Property<DateTime?>("dateModified");

                    b.Property<int>("eqId");

                    b.Property<string>("interfaceUsed");

                    b.Property<string>("location");

                    b.Property<DateTime?>("pfileDate");

                    b.Property<string>("pfileNum");

                    b.Property<string>("price");

                    b.Property<DateTime?>("weDate");

                    b.HasKey("id");

                    b.HasIndex("eqId")
                        .IsUnique();

                    b.ToTable("integratedHeadingSensors");
                });

            modelBuilder.Entity("IdentityExtension.Models.Make", b =>
                {
                    b.Property<int>("makeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description");

                    b.HasKey("makeId");

                    b.ToTable("Makes");
                });

            modelBuilder.Entity("IdentityExtension.Models.MakeModel", b =>
                {
                    b.Property<int>("makeId");

                    b.Property<int>("modelId");

                    b.Property<int>("eqTId");

                    b.Property<int>("id");

                    b.Property<string>("system");

                    b.HasKey("makeId", "modelId");

                    b.HasAlternateKey("id");

                    b.HasIndex("eqTId");

                    b.HasIndex("modelId");

                    b.ToTable("MakeModels");
                });

            modelBuilder.Entity("IdentityExtension.Models.MiniSat", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dateInstalled");

                    b.Property<int>("eqId");

                    b.Property<string>("location");

                    b.Property<DateTime?>("pfileDate");

                    b.Property<string>("pfileNum");

                    b.Property<string>("price");

                    b.Property<DateTime?>("weDate");

                    b.HasKey("id");

                    b.HasIndex("eqId")
                        .IsUnique();

                    b.ToTable("miniSats");
                });

            modelBuilder.Entity("IdentityExtension.Models.Model", b =>
                {
                    b.Property<int>("modelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description");

                    b.HasKey("modelId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("IdentityExtension.Models.Navtex", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dateInstalled");

                    b.Property<int>("eqId");

                    b.Property<string>("location");

                    b.Property<DateTime?>("pfileDate");

                    b.Property<string>("pfileNum");

                    b.Property<string>("price");

                    b.Property<DateTime?>("weDate");

                    b.HasKey("id");

                    b.HasIndex("eqId")
                        .IsUnique();

                    b.ToTable("navtexs");
                });

            modelBuilder.Entity("IdentityExtension.Models.Procurement", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("cDate");

                    b.Property<int>("equipCode");

                    b.Property<string>("lastPurchasePrice");

                    b.Property<string>("make");

                    b.Property<string>("model");

                    b.Property<string>("qtyApproved");

                    b.Property<string>("qtyOrdered");

                    b.Property<string>("remarks");

                    b.Property<string>("rlRef");

                    b.Property<string>("userId");

                    b.HasKey("id");

                    b.HasIndex("equipCode");

                    b.ToTable("procurements");
                });

            modelBuilder.Entity("IdentityExtension.Models.Product", b =>
                {
                    b.Property<int>("productId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name");

                    b.Property<string>("type");

                    b.HasKey("productId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("IdentityExtension.Models.Radar", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dateInstalled");

                    b.Property<DateTime?>("dateModified");

                    b.Property<string>("dingyRange");

                    b.Property<int>("eqId");

                    b.Property<string>("facRange");

                    b.Property<string>("fgbRange");

                    b.Property<string>("ipcRange");

                    b.Property<string>("location");

                    b.Property<DateTime?>("pfileDate");

                    b.Property<string>("pfileNum");

                    b.Property<string>("power");

                    b.Property<string>("price");

                    b.Property<string>("runningHours");

                    b.Property<string>("scannerLength");

                    b.Property<string>("supply");

                    b.Property<string>("trawlerRange");

                    b.Property<string>("voltage");

                    b.Property<DateTime?>("weDate");

                    b.HasKey("id");

                    b.HasIndex("eqId")
                        .IsUnique();

                    b.ToTable("radars");
                });

            modelBuilder.Entity("IdentityExtension.Models.Sart", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dateInstalled");

                    b.Property<DateTime?>("dateModified");

                    b.Property<int>("eqId");

                    b.Property<string>("location");

                    b.Property<string>("outputPower");

                    b.Property<DateTime?>("pfileDate");

                    b.Property<string>("pfileNum");

                    b.Property<string>("price");

                    b.Property<DateTime?>("weDate");

                    b.HasKey("id");

                    b.HasIndex("eqId")
                        .IsUnique();

                    b.ToTable("sarts");
                });

            modelBuilder.Entity("IdentityExtension.Models.SatCompass", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dateInstalled");

                    b.Property<DateTime?>("dateModified");

                    b.Property<int>("eqId");

                    b.Property<string>("location");

                    b.Property<DateTime?>("pfileDate");

                    b.Property<string>("pfileNum");

                    b.Property<string>("price");

                    b.Property<DateTime?>("weDate");

                    b.HasKey("id");

                    b.HasIndex("eqId")
                        .IsUnique();

                    b.ToTable("satCompasses");
                });

            modelBuilder.Entity("IdentityExtension.Models.SatPhone", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("antennaSrno");

                    b.Property<string>("dataLimit");

                    b.Property<DateTime?>("dateInstalled");

                    b.Property<DateTime?>("dateModified");

                    b.Property<string>("email");

                    b.Property<int>("eqId");

                    b.Property<DateTime?>("expireDateBattery");

                    b.Property<string>("fax");

                    b.Property<string>("imeNo");

                    b.Property<string>("inSNo");

                    b.Property<string>("location");

                    b.Property<DateTime?>("pfileDate");

                    b.Property<string>("pfileNum");

                    b.Property<string>("price");

                    b.Property<string>("receiverSrno");

                    b.Property<string>("type");

                    b.Property<string>("voice");

                    b.Property<DateTime?>("weDate");

                    b.HasKey("id");

                    b.HasIndex("eqId")
                        .IsUnique();

                    b.ToTable("satPhones");
                });

            modelBuilder.Entity("IdentityExtension.Models.ShipType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("code");

                    b.Property<string>("description");

                    b.HasKey("id");

                    b.ToTable("ShipType");
                });

            modelBuilder.Entity("IdentityExtension.Models.Sonar", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dateInstalled");

                    b.Property<DateTime?>("dateModified");

                    b.Property<int>("eqId");

                    b.Property<string>("location");

                    b.Property<DateTime?>("pfileDate");

                    b.Property<string>("pfileNum");

                    b.Property<string>("price");

                    b.Property<string>("typeOfTransducer");

                    b.Property<DateTime?>("weDate");

                    b.HasKey("id");

                    b.HasIndex("eqId")
                        .IsUnique();

                    b.ToTable("sonars");
                });

            modelBuilder.Entity("IdentityExtension.Models.SpareProcurement", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("currentStock");

                    b.Property<string>("firstRate");

                    b.Property<string>("forthRate");

                    b.Property<string>("partNo");

                    b.Property<int>("procuId");

                    b.Property<string>("sbRef");

                    b.Property<string>("secondRate");

                    b.Property<string>("thirdRate");

                    b.HasKey("id");

                    b.HasIndex("procuId")
                        .IsUnique();

                    b.ToTable("spareProcurements");
                });

            modelBuilder.Entity("IdentityExtension.Models.SpareProcuView", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("cDate");

                    b.Property<string>("currentStock");

                    b.Property<int>("equipCode");

                    b.Property<string>("firstRate");

                    b.Property<string>("forthRate");

                    b.Property<string>("lastPurchasePrice");

                    b.Property<string>("make");

                    b.Property<string>("model");

                    b.Property<string>("partNo");

                    b.Property<int>("procuId");

                    b.Property<string>("qtyApproved");

                    b.Property<string>("qtyOrdered");

                    b.Property<string>("remarks");

                    b.Property<string>("rlRef");

                    b.Property<string>("sbRef");

                    b.Property<string>("secondRate");

                    b.Property<string>("thirdRate");

                    b.Property<string>("userId");

                    b.HasKey("id");

                    b.ToTable("SpareProcuView");
                });

            modelBuilder.Entity("IdentityExtension.Models.speedLog", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dateInstalled");

                    b.Property<DateTime?>("dateModified");

                    b.Property<int>("eqId");

                    b.Property<string>("location");

                    b.Property<string>("outputPower");

                    b.Property<DateTime?>("pfileDate");

                    b.Property<string>("pfileNum");

                    b.Property<string>("price");

                    b.Property<DateTime?>("weDate");

                    b.HasKey("id");

                    b.HasIndex("eqId")
                        .IsUnique();

                    b.ToTable("speedLogs");
                });

            modelBuilder.Entity("IdentityExtension.Models.SubUnit", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("baseId");

                    b.Property<string>("description");

                    b.Property<int>("subUnitCode");

                    b.Property<int>("type");

                    b.HasKey("id");

                    b.HasIndex("baseId");

                    b.ToTable("subUnits");
                });

            modelBuilder.Entity("IdentityExtension.Models.Weapon", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Ammunitionid");

                    b.Property<int?>("CanonTypeid");

                    b.Property<int?>("Countryid");

                    b.Property<DateTime?>("dateInstalled");

                    b.Property<DateTime?>("dateModified");

                    b.Property<int>("eqId");

                    b.Property<string>("location");

                    b.Property<string>("outputPower");

                    b.Property<DateTime?>("pfileDate");

                    b.Property<string>("pfileNum");

                    b.Property<string>("price");

                    b.Property<DateTime?>("weDate");

                    b.HasKey("id");

                    b.HasIndex("Ammunitionid");

                    b.HasIndex("CanonTypeid");

                    b.HasIndex("Countryid");

                    b.HasIndex("eqId")
                        .IsUnique();

                    b.ToTable("weapons");
                });

            modelBuilder.Entity("IdentityExtension.Models.XenonSLight", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dateInstalled");

                    b.Property<DateTime?>("dateModified");

                    b.Property<int>("eqId");

                    b.Property<string>("location");

                    b.Property<string>("outputPower");

                    b.Property<DateTime?>("pfileDate");

                    b.Property<string>("pfileNum");

                    b.Property<string>("price");

                    b.Property<DateTime?>("weDate");

                    b.HasKey("id");

                    b.HasIndex("eqId")
                        .IsUnique();

                    b.ToTable("xenonS");
                });

            modelBuilder.Entity("IdentityExtension.Models.Ais", b =>
                {
                    b.HasOne("IdentityExtension.Models.Equipment", "Equipment")
                        .WithOne("Ais")
                        .HasForeignKey("IdentityExtension.Models.Ais", "eqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.Anemometers", b =>
                {
                    b.HasOne("IdentityExtension.Models.Equipment", "Equipment")
                        .WithOne("Anemometers")
                        .HasForeignKey("IdentityExtension.Models.Anemometers", "eqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.Base", b =>
                {
                    b.HasOne("IdentityExtension.Models.Area", "Area")
                        .WithMany("Bases")
                        .HasForeignKey("areaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IdentityExtension.Models.ShipType", "ShipType")
                        .WithMany("Base")
                        .HasForeignKey("shipTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.Bill.ElectricityAccountBill", b =>
                {
                    b.HasOne("IdentityExtension.Models.Area", "Area")
                        .WithMany()
                        .HasForeignKey("areaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IdentityExtension.Models.Bill.ElectricityBillType", "ElectricityBillType")
                        .WithMany("electricityAccountBills")
                        .HasForeignKey("billType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.Bill.ElectricityBillDetail", b =>
                {
                    b.HasOne("IdentityExtension.Models.Bill.ElectricityBillType", "ElectricityBillType")
                        .WithMany("ElectricityBillDetails")
                        .HasForeignKey("billType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.CCTV", b =>
                {
                    b.HasOne("IdentityExtension.Models.Equipment", "Equipment")
                        .WithOne("CCTV")
                        .HasForeignKey("IdentityExtension.Models.CCTV", "eqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.Communication", b =>
                {
                    b.HasOne("IdentityExtension.Models.Equipment", "Equipment")
                        .WithOne("Communication")
                        .HasForeignKey("IdentityExtension.Models.Communication", "eqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.DVR", b =>
                {
                    b.HasOne("IdentityExtension.Models.Equipment", "Equipment")
                        .WithOne("DVR")
                        .HasForeignKey("IdentityExtension.Models.DVR", "eqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.ECDI", b =>
                {
                    b.HasOne("IdentityExtension.Models.Equipment", "Equipment")
                        .WithOne("ECDI")
                        .HasForeignKey("IdentityExtension.Models.ECDI", "eqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.Engine", b =>
                {
                    b.HasOne("IdentityExtension.Models.Equipment", "Equipment")
                        .WithOne("Engine")
                        .HasForeignKey("IdentityExtension.Models.Engine", "equipId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.EODs", b =>
                {
                    b.HasOne("IdentityExtension.Models.Equipment", "Equipment")
                        .WithOne("EODs")
                        .HasForeignKey("IdentityExtension.Models.EODs", "eqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.Epirb", b =>
                {
                    b.HasOne("IdentityExtension.Models.Equipment", "Equipment")
                        .WithOne("Epirb")
                        .HasForeignKey("IdentityExtension.Models.Epirb", "eqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.Equipment", b =>
                {
                    b.HasOne("IdentityExtension.Models.Base", "Base")
                        .WithMany()
                        .HasForeignKey("eqBase")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IdentityExtension.Models.EquipmentTable", "EquipmentTable")
                        .WithMany("Equipment")
                        .HasForeignKey("eqTId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.EquipmentProcurement", b =>
                {
                    b.HasOne("IdentityExtension.Models.Procurement", "Procurement")
                        .WithOne("EquipmentProcurement")
                        .HasForeignKey("IdentityExtension.Models.EquipmentProcurement", "procuId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.FuelBillAccount", b =>
                {
                    b.HasOne("IdentityExtension.Models.Area", "Area")
                        .WithMany("FuelBillAccounts")
                        .HasForeignKey("areaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IdentityExtension.Models.FuelBillType", "FuelBillType")
                        .WithMany("FuelBillAccounts")
                        .HasForeignKey("billType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.FuelBillDetail", b =>
                {
                    b.HasOne("IdentityExtension.Models.FuelBillAccount", "FuelBillAccount")
                        .WithMany("FuelBillDetails")
                        .HasForeignKey("billType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.FuelBillSubDetail", b =>
                {
                    b.HasOne("IdentityExtension.Models.FuelBillAccount", "FuelBillAccount")
                        .WithMany()
                        .HasForeignKey("billType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.Generator", b =>
                {
                    b.HasOne("IdentityExtension.Models.Equipment", "Equipment")
                        .WithOne("Generator")
                        .HasForeignKey("IdentityExtension.Models.Generator", "eqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.Gps", b =>
                {
                    b.HasOne("IdentityExtension.Models.Equipment", "Equipment")
                        .WithOne("Gps")
                        .HasForeignKey("IdentityExtension.Models.Gps", "eqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.Guncom", b =>
                {
                    b.HasOne("IdentityExtension.Models.Equipment", "Equipment")
                        .WithOne("Guncom")
                        .HasForeignKey("IdentityExtension.Models.Guncom", "eqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.Gyro", b =>
                {
                    b.HasOne("IdentityExtension.Models.Equipment", "Equipment")
                        .WithOne("Gyro")
                        .HasForeignKey("IdentityExtension.Models.Gyro", "eqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.IntegratedHeadingSensor", b =>
                {
                    b.HasOne("IdentityExtension.Models.Equipment", "Equipment")
                        .WithOne("IntegratedHeadingSensor")
                        .HasForeignKey("IdentityExtension.Models.IntegratedHeadingSensor", "eqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.MakeModel", b =>
                {
                    b.HasOne("IdentityExtension.Models.EquipmentTable", "EquipmentTable")
                        .WithMany("MakeModels")
                        .HasForeignKey("eqTId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IdentityExtension.Models.Make", "Make")
                        .WithMany()
                        .HasForeignKey("makeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IdentityExtension.Models.Model", "Model")
                        .WithMany()
                        .HasForeignKey("modelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.MiniSat", b =>
                {
                    b.HasOne("IdentityExtension.Models.Equipment", "Equipment")
                        .WithOne("MiniSat")
                        .HasForeignKey("IdentityExtension.Models.MiniSat", "eqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.Navtex", b =>
                {
                    b.HasOne("IdentityExtension.Models.Equipment", "Equipment")
                        .WithOne("Navtex")
                        .HasForeignKey("IdentityExtension.Models.Navtex", "eqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.Procurement", b =>
                {
                    b.HasOne("IdentityExtension.Models.EquipmentTable", "EquipmentTable")
                        .WithMany("Procurements")
                        .HasForeignKey("equipCode")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.Radar", b =>
                {
                    b.HasOne("IdentityExtension.Models.Equipment", "Equipment")
                        .WithOne("Radar")
                        .HasForeignKey("IdentityExtension.Models.Radar", "eqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.Sart", b =>
                {
                    b.HasOne("IdentityExtension.Models.Equipment", "Equipment")
                        .WithOne("Sart")
                        .HasForeignKey("IdentityExtension.Models.Sart", "eqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.SatCompass", b =>
                {
                    b.HasOne("IdentityExtension.Models.Equipment", "Equipment")
                        .WithOne("SatCompass")
                        .HasForeignKey("IdentityExtension.Models.SatCompass", "eqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.SatPhone", b =>
                {
                    b.HasOne("IdentityExtension.Models.Equipment", "Equipment")
                        .WithOne("SatPhone")
                        .HasForeignKey("IdentityExtension.Models.SatPhone", "eqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.Sonar", b =>
                {
                    b.HasOne("IdentityExtension.Models.Equipment", "Equipment")
                        .WithOne("Sonar")
                        .HasForeignKey("IdentityExtension.Models.Sonar", "eqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.SpareProcurement", b =>
                {
                    b.HasOne("IdentityExtension.Models.Procurement", "Procurement")
                        .WithOne("SpareProcurement")
                        .HasForeignKey("IdentityExtension.Models.SpareProcurement", "procuId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.speedLog", b =>
                {
                    b.HasOne("IdentityExtension.Models.Equipment", "Equipment")
                        .WithOne("SpeedLog")
                        .HasForeignKey("IdentityExtension.Models.speedLog", "eqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.SubUnit", b =>
                {
                    b.HasOne("IdentityExtension.Models.Base", "Base")
                        .WithMany("SubUnits")
                        .HasForeignKey("baseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.Weapon", b =>
                {
                    b.HasOne("IdentityExtension.Models.Ammunition", "Ammunition")
                        .WithMany("Weapon")
                        .HasForeignKey("Ammunitionid");

                    b.HasOne("IdentityExtension.Models.CanonType", "CanonType")
                        .WithMany("Weapon")
                        .HasForeignKey("CanonTypeid");

                    b.HasOne("IdentityExtension.Models.Country", "Country")
                        .WithMany("Weapon")
                        .HasForeignKey("Countryid");

                    b.HasOne("IdentityExtension.Models.Equipment", "Equipment")
                        .WithOne("Weapon")
                        .HasForeignKey("IdentityExtension.Models.Weapon", "eqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityExtension.Models.XenonSLight", b =>
                {
                    b.HasOne("IdentityExtension.Models.Equipment", "Equipment")
                        .WithOne("XenonSLight")
                        .HasForeignKey("IdentityExtension.Models.XenonSLight", "eqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
